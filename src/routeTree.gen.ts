/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/root'
import { Route as DotSrcRoutesHomeRouteImport } from './routes/home'
import { Route as ExampleGettingStartedRouteRouteImport } from './../example/getting-started/route'
import { Route as ExampleRouteRouteImport } from './../example/route'

const DotSrcRoutesHomeRoute = DotSrcRoutesHomeRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ExampleGettingStartedRouteRoute =
  ExampleGettingStartedRouteRouteImport.update({
    id: '/example/getting-started',
    path: '/example/getting-started',
    getParentRoute: () => rootRouteImport,
  } as any)
const ExampleRouteRoute = ExampleRouteRouteImport.update({
  id: '/example/',
  path: '/example/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof DotSrcRoutesHomeRoute
  '/example': typeof ExampleRouteRoute
  '/example/getting-started': typeof ExampleGettingStartedRouteRoute
}
export interface FileRoutesByTo {
  '/': typeof DotSrcRoutesHomeRoute
  '/example': typeof ExampleRouteRoute
  '/example/getting-started': typeof ExampleGettingStartedRouteRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof DotSrcRoutesHomeRoute
  '/example/': typeof ExampleRouteRoute
  '/example/getting-started': typeof ExampleGettingStartedRouteRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/example' | '/example/getting-started'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/example' | '/example/getting-started'
  id: '__root__' | '/' | '/example/' | '/example/getting-started'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DotSrcRoutesHomeRoute: typeof DotSrcRoutesHomeRoute
  ExampleRouteRoute: typeof ExampleRouteRoute
  ExampleGettingStartedRouteRoute: typeof ExampleGettingStartedRouteRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DotSrcRoutesHomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/example/getting-started': {
      id: '/example/getting-started'
      path: '/example/getting-started'
      fullPath: '/example/getting-started'
      preLoaderRoute: typeof ExampleGettingStartedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/example/': {
      id: '/example/'
      path: '/example'
      fullPath: '/example'
      preLoaderRoute: typeof ExampleRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  DotSrcRoutesHomeRoute: DotSrcRoutesHomeRoute,
  ExampleRouteRoute: ExampleRouteRoute,
  ExampleGettingStartedRouteRoute: ExampleGettingStartedRouteRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
